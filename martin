import pandas as pd
from datetime import datetime 
import MetaTrader5 as mt5 
import numpy as np 
import math as m
from datetime import datetime
import time
from pandas_datareader import data as pdr
import statistics
from fractions import Fraction as F

# estabelecemos a conexão ao MetaTrader 5
if not mt5.initialize():
    print("initialize() Falha ao Iniciar seu metra Trade 5")
    mt5.shutdown()

#testando se o ativo é valido 
symbol = 'WING21'
symbol_info = mt5.symbol_info(symbol)
if symbol_info is None:
    print(symbol, "Não encontrato")
    mt5.shutdown()
    quit()

#adicionado symbol se nao existir
if not symbol_info.visible:
    print('Symbol Não visivel, tentnado adicionar')
    if not mt5.symbol_select(symbol,True):
        print('symbol_select({{}})failed, exit', symbol)
        mt5.shutdown()
        quit()

tempo = time.time() + 18000
lista = ['WING21']
while time.time() < tempo:
    
    for i in lista:
        
        #FILTROS DE DESVIO PADRÕES
        symbol = i
        desvio = 1
        desvio_3 = 2
        
        ativo = mt5.copy_rates_from_pos(symbol, mt5.TIMEFRAME_M1, 0, 10)
        ativo = pd.DataFrame(ativo)
        ativo['time'] = pd.to_datetime(ativo['time'], unit='s')
        ativo['mm5'] = ativo['close'].ewm(span=5).mean()
        ativo[f'{desvio} desv_cima'] = (ativo['mm5'].ewm(span=5).std() * desvio) + ativo['mm5']
        ativo[f'{desvio} desv_baixo'] = ativo['mm5'] - (ativo['mm5'].ewm(span=5).std() * desvio) 
        ativo[f'{desvio_3} desv_cima'] = (ativo['mm5'].ewm(span=5).std() * desvio_3) + ativo['mm5']
        ativo[f'{desvio_3} desv_baixo'] = ativo['mm5'] - (ativo['mm5'].ewm(span=5).std() * desvio_3) 
        
        ativo.set_index('time', inplace = True)    

        #PREPARANDO ORDEM DE COMPRA 
        #FILTROS
        target_profit = 50 
        stop_loss = 40.0
        lot = 100.0
        tangente_alta = 0
        tangente_baixa = 0
        
        
        point = mt5.symbol_info(symbol).point
        price = mt5.symbol_info_tick(symbol).ask
        desviation = 1
        COMPRA = {
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": symbol,
            "volume": lot,
            "type": mt5.ORDER_TYPE_BUY,
            "price": price,
            "sl": price - stop_loss * point,
            "tp": price + target_profit * point,
            "magic": 234000,
            "desviation": desviation,
            "comment": "prython script open",
            "type_time":mt5.ORDER_TIME_GTC,
            'type_filling':mt5.ORDER_FILLING_RETURN,

              }
        
        #PREPARANDO ORDEM DE VENDA 
            
        point = mt5.symbol_info(symbol).point
        price=mt5.symbol_info_tick(symbol).bid
        desviation = 1
        VENDA={
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": symbol,
            "volume": lot,
            "type": mt5.ORDER_TYPE_SELL,
            "price": price,
            "sl": price + stop_loss * point,
            "tp": price - target_profit * point,    
            "deviation": desviation,
            "magic": 234000,
            "comment": "python script close",
            "type_time": mt5.ORDER_TIME_GTC,
            "type_filling": mt5.ORDER_FILLING_RETURN,
              }
        
        if mt5.positions_get(symbol=symbol) != ():
            posicao_atual = mt5.positions_get(symbol=symbol)[0][9]
        tick = mt5.symbol_info_tick(symbol)
        entrada_compra = round(ativo[f'{desvio} desv_cima'][-1], 2)
        entrada_venda = round(ativo[f'{desvio} desv_baixo'][-1], 2)
        
        print (f'{symbol} - Tick Atual: {tick.last}, {desvio} std acima: {entrada_compra}, {desvio} std abaixo {entrada_venda}','Compra:', 
               tick.last > ativo[f'{desvio} desv_cima'][-1] and (tick.last - ativo['close'][-2] <= 0), 'Venda:',
               tick.last < ativo[f'{desvio} desv_baixo'][-1] and (tick.last - ativo['close'][-2]) >= 0, end  = '\r')
        
        #############################################-OPERAR NA QUEDA-###########################################################        
        
        #Enviando ORDEM DE VENDA se tiver 2 desvio padrões acima 
        if tick.last > ativo[f'{desvio} desv_cima'][-1] and (ativo['mm5'][-1] - ativo['mm5'][-1]) <= tangente_baixa:

            if mt5.positions_get(symbol=symbol) == ():
                #enviadno ordem de compra 
                result = mt5.order_send(VENDA)
                print(f'1. Ordem COMPRA enviada:{lot} de {symbol} ao preço de {price} com desviation de {desviation}',end  = '\r')
        
        #Aumentando a mão com 3 desvio padrões 
        if tick.last > ativo[f'{desvio_3} desv_cima'][-1] and (ativo['mm5'][-1] - ativo['mm5'][-1]) <= tangente_baixa:

            if mt5.positions_get(symbol=symbol) != () and mt5.positions_get(symbol=symbol)[0][9] == 100.0:
                #enviadno ordem de compra 
                result = mt5.order_send(VENDA)
                print(f'1. Ordem COMPRA enviada:{lot} de {symbol} ao preço de {price} com desviation de {desviation}',end  = '\r')
        
        #Encerrando posição vendida quando ficar abaixo da média:
        if tick.last < ativo['mm5'][-1]:

            if mt5.positions_get(symbol=symbol) != () and mt5.positions_get(symbol=symbol)[0][5] == 1:
                #enviadno ordem para ZERAR 
                COMPRA = {
                    "action": mt5.TRADE_ACTION_DEAL,
                    "symbol": symbol,
                    "volume": posicao_atual,
                    "type": mt5.ORDER_TYPE_BUY,
                    "price": price,
                    "magic": 234000,
                    "desviation": desviation,
                    "comment": "prython script open",
                    "type_time":mt5.ORDER_TIME_GTC,
                    'type_filling':mt5.ORDER_FILLING_RETURN,

                      }
                result = mt5.order_send(COMPRA)
                print(f'1. Ordem COMPRA enviada:{lot} de {symbol} ao preço de {price} com desviation de {desviation}',end  = '\r')
                
#                 if mt5.positions_get(symbol=symbol) != () and mt5.positions_get(symbol=symbol)[0][9] == 200.0:
#                     #enviadno ordem de compra 
#                     result = mt5.order_send(request)
#                     print(f'1. Ordem COMPRA enviada:{lot} de {symbol} ao preço de {price} com desviation de {desviation}',end  = '\r')
        
        #############################################-OPERAR NA ALTA-###########################################################
        
        # Enviando ORDEM DE COMPRA se tiver 3 desvio padrões abaixo:          
        if tick.last < ativo[f'{desvio} desv_baixo'][-1] and (ativo['mm5'][-1] - ativo['mm5'][-1]) >= tangente_alta:
            
            if mt5.positions_get(symbol=symbol) == (): 
                result = mt5.order_send(COMPRA)
                #verificando a resultado da execução 
                print(f'2. Ordem VENDA enviada: {lot} de {symbol} ao preço de {price} com desviation de {desviation}',end  = '\r')
        
        #Aumentando a mão com 3 desvio padrões:          
        if tick.last < ativo[f'{desvio_3} desv_baixo'][-1] and (ativo['mm5'][-1] - ativo['mm5'][-1]) >= tangente_alta:
            
            if mt5.positions_get(symbol=symbol) != () and mt5.positions_get(symbol=symbol)[0][9] == 100.0: 
                result = mt5.order_send(COMPRA)
                #verificando a resultado da execução 
                print(f'2. Ordem VENDA enviada: {lot} de {symbol} ao preço de {price} com desviation de {desviation}',end  = '\r')
        
        #Encerrando posição comprada quando ficar acima da média:
        if tick.last > ativo['mm5'][-1]:
            if mt5.positions_get(symbol=symbol) != () and mt5.positions_get(symbol=symbol)[0][5] == 0:
                #enviadno ordem para ZERAR 
                VENDA = {
                    "action": mt5.TRADE_ACTION_DEAL,
                    "symbol": symbol,
                    "volume": posicao_atual,
                    "type": mt5.ORDER_TYPE_SELL,
                    "price": price,
                    "magic": 234000,
                    "desviation": desviation,
                    "comment": "prython script open",
                    "type_time":mt5.ORDER_TIME_GTC,
                    'type_filling':mt5.ORDER_FILLING_RETURN,

                      }
                result = mt5.order_send(VENDA)
                print(f'1. Ordem COMPRA enviada:{lot} de {symbol} ao preço de {price} com desviation de {desviation}',end  = '\r')
              
        time.sleep(0.5)
